{
  "address": "0xc13Ad3A3b365d897e13dCF94Bf6f6C6f95C53069",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_eventgameid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "_eventtheplayeraddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_eventchoicemade",
          "type": "string"
        }
      ],
      "name": "eventplaygame",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameid",
          "type": "uint256"
        }
      ],
      "name": "_checkgameregistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "_checkplayeringame",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "_checkplayerregistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gamecount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_playerstore",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "playeraddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "playername",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "playerscore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerbalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_playinggames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playinggameid",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "playerininaddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "gameover",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gamescore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "game_id",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "choosegametostake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameinplay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playinggameid",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "playerininaddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "gameover",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gamescore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gamesregistered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gamecount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playeraddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payfee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playersregistered",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "playeraddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "playername",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "playerscore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerbalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prev_gamestaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameid",
          "type": "uint256"
        }
      ],
      "name": "registergame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_playername",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "registerplayername",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectPaper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectRock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectScissors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeprevwinnings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalsupplytokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x850bf7f33073b64e0f0fad7e17246f2bc478a6236102eef74731f9f83e8cc6f8",
  "receipt": {
    "to": null,
    "from": "0x06Da25591CdF58758C4b3aBbFf18B092e4380B65",
    "contractAddress": "0xc13Ad3A3b365d897e13dCF94Bf6f6C6f95C53069",
    "transactionIndex": 67,
    "gasUsed": "2970393",
    "logsBloom": "0x
    "blockHash": "0xd7424d007a743149fdb9b8acaf5dd3022a6bb3ad420682e7af5657f697a456f3",
    "transactionHash": "0x850bf7f33073b64e0f0fad7e17246f2bc478a6236102eef74731f9f83e8cc6f8",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 9462006,
        "transactionHash": "0x850bf7f33073b64e0f0fad7e17246f2bc478a6236102eef74731f9f83e8cc6f8",
        "address": "0xc13Ad3A3b365d897e13dCF94Bf6f6C6f95C53069",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000006da25591cdf58758c4b3abbff18b092e4380b65"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0xd7424d007a743149fdb9b8acaf5dd3022a6bb3ad420682e7af5657f697a456f3"
      }
    ],
    "blockNumber": 9462006,
    "cumulativeGasUsed": "12089785",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x06Da25591CdF58758C4b3aBbFf18B092e4380B65"
  ],
  "solcInputHash": "d5c939dd8cd91d21eca933b742ff7541",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.92b52cbf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventgameid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_eventtheplayeraddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_eventchoicemade\",\"type\":\"string\"}],\"name\":\"eventplaygame\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"_checkgameregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"_checkplayeringame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"_checkplayerregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamecount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_playerstore\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"playeraddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"playername\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"playerscore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerbalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_playinggames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playinggameid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"playerininaddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"gameover\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gamescore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"choosegametostake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameinplay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playinggameid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"playerininaddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"gameover\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gamescore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesregistered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamecount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playeraddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payfee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersregistered\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"playeraddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"playername\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"playerscore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerbalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prev_gamestaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"registergame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_playername\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"registerplayername\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectPaper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectRock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectScissors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeprevwinnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalsupplytokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"npn Contract initialization. The `constructor` is executed only once when the contract is created.\"},\"payfee(address,uint256)\":{\"notice\":\"A function to transfer tokens. The `external` modifier makes a function *only* callable from outside the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/RockPaperScissors.sol\":{\"content\":\"// Solidity files have to start with this pragma.\\r\\n// It will be used by the Solidity compiler to validate its version.\\r\\npragma solidity 0.8.2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport '../contracts/libraries/StringUtils.sol';\\r\\n\\r\\n\\r\\n// This is the main building block for smart contracts.\\r\\ncontract RockPaperScissors is    Ownable,ERC20 {\\r\\n    \\r\\n    // We set the 3 options players are required to choose\\r\\n    // We set it to constant to avoid wrong typo, safer for the contract\\r\\n    string constant   rock = \\\"rock\\\" ;\\r\\n    string constant  paper = \\\"paper\\\";\\r\\n    string constant  scissors = \\\"scissors\\\";\\r\\n    bool   rockchosen = false;\\r\\n    bool   scissorschosen = false;\\r\\n    bool   paperchosen = false;\\r\\n    string choicemade;\\r\\n    bool   setprevwinnings = false;\\r\\n    uint   public prev_gamestaked;\\r\\n    string private _tokenname =\\\"RPSTOKENS\\\";\\r\\n    string private _tokensymbol= \\\"RPS\\\";\\r\\n    address public _owner;\\r\\n    uint randNonce =0;\\r\\n    uint modulus =0;\\r\\n    uint _payfee=0;\\r\\n    uint maxWaitTime = 100;\\r\\n         \\r\\n  //  address  owner; \\r\\n // We decide to use the mapping instead of the struct approach\\r\\n       struct Game {\\r\\n             uint  gameid; \\r\\n             uint256 gamecount;\\r\\n             }\\r\\n\\r\\n       struct Players {\\r\\n              address payable playeraddress;\\r\\n              string playername;\\r\\n              uint256 playerscore;\\r\\n              uint256 playerbalance;\\r\\n              }\\r\\n       \\r\\n       struct PlayingGame{\\r\\n            uint playinggameid;\\r\\n            address payable playerininaddress;\\r\\n            bool gameover;    \\r\\n            uint256 gamescore; \\r\\n            uint256 playerscount;\\r\\n            uint duration;\\r\\n            }\\r\\n\\r\\n    // The fixed amount of tokens stored in an unsigned integer type variable.\\r\\n    uint256 public totalsupplytokens = 1000000;\\r\\n     \\r\\n    // An address type variable is used to store ethereum accounts taken from Ownable.sol\\r\\n   // address public owner;\\r\\n\\r\\n    // A mapping is a key/value map. Here we store each account balance.\\r\\n    // We store values that can be easy to have when we want to index values\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(bytes32 => bool)) playeringamecheck;\\r\\n    mapping(uint => mapping(address => uint)) prev_winning;\\r\\n    mapping(uint => mapping(address => uint)) gamewithplayer;     \\r\\n    mapping(uint => uint) gamesplayed;\\r\\n    mapping(address => address) playersplayed;\\r\\n       //We set into memory for cheaper access\\r\\n\\r\\n       mapping(uint=>Game) public _games;\\r\\n       mapping(address=>Players)public _playerstore;\\r\\n       mapping(uint=>PlayingGame) public _playinggames;\\r\\n\\r\\n    // We set the object for our tracks\\r\\n   Game  newgame;\\r\\n   Players  newplayerregistered;\\r\\n   PlayingGame  playerinthegame;\\r\\n    \\r\\n\\r\\n    // We push into storage \\r\\n    Game[] public gamesregistered;\\r\\n    Players[] public playersregistered;\\r\\n   PlayingGame[] public gameinplay;\\r\\n     \\r\\n    /**npn\\r\\n     * Contract initialization.\\r\\n     *\\r\\n     * The `constructor` is executed only once when the contract is created.\\r\\n     */\\r\\n\\r\\n\\r\\n      // modifier to check if caller is owner\\r\\n      \\r\\n      constructor(address __owner) ERC20(_tokenname, _tokensymbol ) {\\r\\n        _owner =__owner;\\r\\n        \\r\\n         totalSupply();\\r\\n         \\r\\n\\r\\n    }\\r\\n/*\\r\\n    modifier isOwner() {\\r\\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use 'require' to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n      \\r\\n    }\\r\\n  */  \\r\\n    /**\\r\\n     * A function to transfer tokens.\\r\\n     *\\r\\n     * The `external` modifier makes a function *only* callable from outside\\r\\n     * the contract.\\r\\n     */\\r\\n\\r\\nfunction payfee(address _playeraddress, uint256 amount) public returns (bool){\\r\\n              // Call returns a boolean value indicating success or failure.\\r\\n        // This is the current recommended method to use.\\r\\n        _payfee = amount;\\r\\n     \\r\\n        require ( amount >= 10, \\\"Amount not enough to play!\\\");\\r\\n        (bool sent, bytes memory data) = _playeraddress.call{value: _payfee}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n         \\r\\n       return true;\\r\\n    }\\r\\n    function registerplayername(string memory _playername, address payable _playeraddress) public  returns(string memory, address){\\r\\n         \\r\\n              require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n         \\r\\n               if (payfee(_playeraddress,_payfee ) == true){\\r\\n            uint256 playerbalance =0;\\r\\n            playerbalance = balanceOf(_playeraddress);\\r\\n\\r\\n           if(playersplayed[_playeraddress] != _playeraddress){\\r\\n             //for player who has ever played before\\r\\n            playersplayed[_playeraddress] =_playeraddress ;\\r\\n            // for registered player\\r\\n\\r\\n                // Storing to memory\\r\\n            newplayerregistered = Players(_playeraddress,_playername, 0,playerbalance ); \\r\\n             _playerstore[_playeraddress].playeraddress = _playeraddress;\\r\\n             _playerstore[_playeraddress].playername = _playername;\\r\\n             _playerstore[_playeraddress].playerscore = 0;\\r\\n             _playerstore[_playeraddress].playerbalance = playerbalance;\\r\\n               \\r\\n                \\r\\n                // Storing to storage\\r\\n            playersregistered.push(newplayerregistered);                        \\r\\n\\r\\n            return (_playername,_playeraddress );\\r\\n     \\r\\n}\\r\\n}\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function registergame(uint _gameid) external  returns(uint){\\r\\n                uint256 i =0;\\r\\n                i++;\\r\\n           require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n    \\r\\n             uint256 gamecount = 0;\\r\\n         \\r\\n            if(gamesplayed[_gameid] != _gameid){\\r\\n           \\r\\n             gamesplayed[_gameid] = _gameid;\\r\\n              newgame = Game(_gameid,gamecount );\\r\\n\\r\\n              // Store into memory \\r\\n                _games[_gameid].gameid = _gameid;\\r\\n                _games[_gameid].gamecount = i;\\r\\n                \\r\\n             \\r\\n              gamesregistered.push(newgame);\\r\\n              return (_gameid);\\r\\n             }\\r\\n         \\r\\n    }\\r\\n\\r\\n\\r\\n// function -check if registered\\r\\n// function -check if game is registered\\r\\n        \\r\\n            \\r\\n\\r\\n        //stakeawards\\r\\n        //add to previous winnings\\r\\n    function setplayinggame(uint _gameid, address payable playersaddress) internal returns(uint, address) {\\r\\n           uint _playerscount =0;\\r\\n           _playerscount++;\\r\\n             //Game receipt\\r\\n          // increase nonce\\r\\n       require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n         uint __gameid =0;\\r\\n         __gameid = _gameid;\\r\\n         randNonce++; \\r\\n         modulus= 3;\\r\\n        __gameid = uint(keccak256(abi.encodePacked(block.timestamp,\\r\\n                                          msg.sender,\\r\\n                                          randNonce))) % \\r\\n                                          modulus; \\r\\n         require(msg.sender == _owner, \\\"Caller is not owner\\\");\\r\\n         \\r\\n        // The list of players must be less than two\\r\\n         require( _playinggames[_gameid].playerscount < 2 == true, \\\"Only two players can play\\\");       \\r\\n         require(gamewithplayer[_gameid][playersaddress] != __gameid, \\\"Player already is set in game\\\");      \\r\\n        \\r\\n          gamewithplayer[_gameid][playersaddress] = __gameid;\\r\\n          uint _duration = block.number + maxWaitTime;\\r\\n         playerinthegame = PlayingGame(_gameid, playersaddress, false, 0,0, _duration);\\r\\n        \\r\\n         // Setting into memory          \\r\\n               \\r\\n         _playinggames[_gameid].playinggameid = _gameid;\\r\\n        _playinggames[_gameid].playerininaddress = playersaddress;\\r\\n        _playinggames[_gameid].gameover = false;\\r\\n        _playinggames[_gameid].gamescore = 0;\\r\\n        _playinggames[_gameid].playerscount = _playerscount;\\r\\n        _playinggames[_gameid].duration = _duration;\\r\\n         // Setting into storage\\r\\n         gameinplay.push(playerinthegame);\\r\\n \\r\\n       return(_gameid, playersaddress);  \\r\\n       }\\r\\n\\r\\n    function _checkplayerregistered(address payable _playeraddress) public returns (bool ) {\\r\\n              require(playersplayed[_playeraddress] == _playeraddress );\\r\\n              return(true);\\r\\n        }\\r\\n        function _checkgameregistered(uint _gameid) public returns (bool) {\\r\\n            require(gamesplayed[_gameid]== _gameid);\\r\\n            return(true);\\r\\n        } \\r\\n\\r\\n        function _checkplayeringame(uint  _gameid,address _playeraddress ) public returns (bool){\\r\\n            require( gamewithplayer[_gameid][_playeraddress] == _gameid );\\r\\n             return (true);\\r\\n        }\\r\\n  //Let's play game\\r\\n    function selectRock( ) public virtual  returns(bool)\\r\\n   { \\r\\n     \\r\\n     if (rockchosen){\\r\\n          rockchosen = true;\\r\\n           return (rockchosen); \\r\\n     }else{\\r\\n        rockchosen = false;\\r\\n         return (rockchosen);\\r\\n     }         \\r\\n       \\r\\n     }\\r\\n\\r\\n    function selectPaper() public virtual  returns(bool)\\r\\n     { if (paperchosen){\\r\\n          paperchosen = true; \\r\\n           return (paperchosen);\\r\\n     }else{\\r\\n        paperchosen = false;\\r\\n         return (paperchosen);\\r\\n     }         \\r\\n      \\r\\n     }\\r\\n    function selectScissors(  ) public virtual  returns(bool){\\r\\n     if (scissorschosen){\\r\\n          scissorschosen = true;\\r\\n          return (scissorschosen); \\r\\n     }else{\\r\\n        scissorschosen = false;\\r\\n        return (scissorschosen);\\r\\n     }         \\r\\n       \\r\\n     }\\r\\n\\r\\n    function stakeprevwinnings( ) public virtual  returns(bool) {\\r\\n         if(setprevwinnings) {\\r\\n           setprevwinnings =true;\\r\\n         }else{\\r\\n           setprevwinnings =false;\\r\\n         }\\r\\n    \\r\\n   \\r\\n    return (setprevwinnings);\\r\\n    }\\r\\n \\r\\n   function choosegametostake(uint game_id,address payable _playeraddress ) public virtual   returns(uint256){\\r\\n    prev_gamestaked =game_id;\\r\\n     if (stakeprevwinnings( ) ==true ){\\r\\n      uint256 winnings =0;\\r\\n     winnings  =    prev_winning[prev_gamestaked][_playeraddress];\\r\\n     transfer(_owner, winnings);\\r\\n     return( winnings);\\r\\n    }\\r\\n    }\\r\\n    /*\\r\\n    function compare(string memory choicemade, string memory chosenactmade) public returns(bool){\\r\\n        require (choicemade =chosenactmade, \\\"You did not win!\\\");\\r\\n        return (true);\\r\\n    \\r\\n    }\\r\\n    */\\r\\n    \\r\\n   event eventplaygame(uint  _eventgameid, address payable _eventtheplayeraddress, string   _eventchoicemade);\\r\\n   \\r\\n   function playgame(uint _gameid, address payable _theplayeraddress, string memory _choicemade ) internal returns(string memory, address, string memory){\\r\\n       \\r\\n       // Access Controls\\r\\n       require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n       _checkplayerregistered(_theplayeraddress);\\r\\n       _checkgameregistered( _gameid);\\r\\n       _checkplayeringame( _gameid ,_theplayeraddress ); \\r\\n       choosegametostake(prev_gamestaked, _theplayeraddress );\\r\\n       \\r\\n       for (uint i=0; i<2; i++){  \\r\\n        \\r\\n           choicemade = _choicemade;\\r\\n            if (selectRock() == true ){\\r\\n               scissorschosen = false;\\r\\n                paperchosen = false;\\r\\n          \\r\\n             choicemade = \\\"rock\\\" ;\\r\\n             }\\r\\n           if (selectPaper()== true ){\\r\\n              rockchosen = false;\\r\\n              scissorschosen = false;\\r\\n           \\r\\n             choicemade = \\\"paper\\\" ;\\r\\n             }\\r\\n             \\r\\n            if (selectScissors()== true ){\\r\\n            rockchosen =false;\\r\\n           paperchosen =false;\\r\\n             choicemade = \\\"scissors\\\" ;\\r\\n             }\\r\\n             continue; \\r\\n\\r\\n           \\r\\n\\r\\n   string[] memory choices;\\r\\n     choices[0] =\\\"rock\\\";\\r\\n     choices[1]=\\\"paper\\\";\\r\\n     choices[2]=\\\"scissors\\\";\\r\\n        // We create a random number generator for the values to be able to pick from\\r\\n        \\r\\n        uint shuffler = 0;\\r\\n        shuffler= 3;\\r\\n        uint _gameindex = 0;\\r\\n         randNonce++; \\r\\n        _gameindex =   uint(keccak256(abi.encodePacked(block.timestamp,\\r\\n                                          msg.sender,\\r\\n                                          randNonce))) % \\r\\n                                          shuffler; \\r\\n      \\r\\n    string memory choice = choices[_gameindex];  \\r\\n    //  const choice = Math.floor(Math.random() * choices.length);\\r\\n   // const choice = safemath.mod(choices, choices.length)\\r\\n      \\r\\n    if (StringUtils.equal(choicemade, choice)== true ){\\r\\n     \\r\\n        approve( _theplayeraddress, 10000);\\r\\n        transfer(_theplayeraddress,10000);\\r\\n        // _owner.transfer(_theplayeraddress,10000);\\r\\n          balanceOf(_theplayeraddress);\\r\\n          newplayerregistered.playeraddress =_theplayeraddress;\\r\\n       prev_winning[_gameid][_theplayeraddress] =10000; \\r\\n\\r\\n     \\r\\n       _playerstore[_theplayeraddress].playerscore +=5;  \\r\\n    }        \\r\\n  \\r\\n  emit eventplaygame( _gameid, _theplayeraddress,  _choicemade);\\r\\n    }\\r\\n    \\r\\n    }\\r\\n     \\r\\n     function totalSupply() public view virtual override  returns (uint256) {\\r\\n        return totalsupplytokens;\\r\\n    }\\r\\n   \\r\\n function balanceOf(address account) public view override  returns (uint256) {\\r\\n        return balances[account];\\r\\n    }\\r\\n  \\r\\n function owner() public view virtual override returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x05dd3ee52b1c927465aadefbff610ea4263146e23bdce09af99f9f8073d0f040\"},\"contracts/libraries/StringUtils.sol\":{\"content\":\"library StringUtils {\\r\\n    /// @dev Does a byte-by-byte lexicographical comparison of two strings.\\r\\n    /// @return a negative number if `_a` is smaller, zero if they are equal\\r\\n    /// and a positive numbe if `_b` is smaller.\\r\\n    function compare(string memory _a, string memory _b) public returns (int) {\\r\\n        bytes memory a = bytes(_a);\\r\\n        bytes memory b = bytes(_b);\\r\\n        uint minLength = a.length;\\r\\n        if (b.length < minLength) minLength = b.length;\\r\\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\\r\\n        for (uint i = 0; i < minLength; i ++)\\r\\n            if (a[i] < b[i])\\r\\n                return -1;\\r\\n            else if (a[i] > b[i])\\r\\n                return 1;\\r\\n        if (a.length < b.length)\\r\\n            return -1;\\r\\n        else if (a.length > b.length)\\r\\n            return 1;\\r\\n        else\\r\\n            return 0;\\r\\n    }\\r\\n    /// @dev Compares two strings and returns true iff they are equal.\\r\\n    function equal(string memory _a, string memory _b) public returns (bool) {\\r\\n        return compare(_a, _b) == 0;\\r\\n    }\\r\\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\\r\\n    function indexOf(string memory _haystack, string memory _needle) public returns (int)\\r\\n    {\\r\\n    \\tbytes memory h = bytes(_haystack);\\r\\n    \\tbytes memory n = bytes(_needle);\\r\\n    \\tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \\r\\n    \\t\\treturn -1;\\r\\n    \\telse if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \\\"int\\\" type with a max length of (2^128 - 1)\\r\\n    \\t\\treturn -1;\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n    \\telse\\r\\n    \\t{\\r\\n    \\t\\tuint subindex = 0;\\r\\n    \\t\\tfor (uint i = 0; i < h.length; i ++)\\r\\n    \\t\\t{\\r\\n    \\t\\t\\tif (h[i] == n[0]) // found the first char of b\\r\\n    \\t\\t\\t{\\r\\n    \\t\\t\\t\\tsubindex = 1;\\r\\n    \\t\\t\\t\\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\\r\\n    \\t\\t\\t\\t{\\r\\n    \\t\\t\\t\\t\\tsubindex++;\\r\\n    \\t\\t\\t\\t}\\t\\r\\n    \\t\\t\\t\\tif(subindex == n.length)\\r\\n    \\t\\t\\t\\t\\treturn int(i);\\r\\n    \\t\\t\\t}\\r\\n    \\t\\t}\\r\\n    \\t\\treturn -1;\\r\\n    \\t}\\t\\r\\n    }\\r\\n}\",\"keccak256\":\"0xde12758f08b70762dacceafcab985517885d4a9340806d334ec0fc80d418d3f0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c80638e0c62e31161011a578063b2bdfa7b116100ad578063d6452b1f1161007c578063d6452b1f146106a1578063da92cae4146106d1578063dd62ed3e14610702578063f2fde38b14610732578063f67ce9f31461074e57610206565b8063b2bdfa7b146105fd578063c6de1b4b1461061b578063c93aef061461064e578063d5d2441a1461068357610206565b8063a33a48d6116100e9578063a33a48d61461054f578063a457c2d71461056d578063a9059cbb1461059d578063a9d5642a146105cd57610206565b80638e0c62e3146104a057806391af152c146104d057806395d89b4114610500578063a0f5c2751461051e57610206565b806340ba937b1161019d5780636d1da1911161016c5780636d1da191146103f757806370a0823114610415578063715018a6146104455780638ac3c0141461044f5780638da5cb5b1461048257610206565b806340ba937b1461034857806341eb8b8b1461037857806355cf3251146103a957806357e03abb146103c757610206565b806323b872dd116101d957806323b872dd146102ac578063313ce567146102dc5780633933de8a146102fa578063395093511461031857610206565b806306fdde031461020b578063095ea7b314610229578063177dc57a1461025957806318160ddd1461028e575b600080fd5b61021361076c565b604051610220919061281b565b60405180910390f35b610243600480360381019061023e9190612408565b6107fe565b6040516102509190612800565b60405180910390f35b610273600480360381019061026e9190612498565b61081c565b60405161028596959493929190612a08565b60405180910390f35b610296610895565b6040516102a391906129ed565b60405180910390f35b6102c660048036038101906102c191906123b9565b61089f565b6040516102d39190612800565b60405180910390f35b6102e4610997565b6040516102f19190612a92565b60405180910390f35b6103026109a0565b60405161030f9190612800565b60405180910390f35b610332600480360381019061032d9190612408565b610a1a565b60405161033f9190612800565b60405180910390f35b610362600480360381019061035d9190612498565b610ac6565b60405161036f91906129ed565b60405180910390f35b610392600480360381019061038d9190612498565b610c58565b6040516103a0929190612a69565b60405180910390f35b6103b1610c7c565b6040516103be91906129ed565b60405180910390f35b6103e160048036038101906103dc91906124c1565b610c82565b6040516103ee9190612800565b60405180910390f35b6103ff610cea565b60405161040c9190612800565b60405180910390f35b61042f600480360381019061042a919061232b565b610d52565b60405161043c91906129ed565b60405180910390f35b61044d610d9b565b005b6104696004803603810190610464919061232b565b610e23565b60405161047994939291906127b4565b60405180910390f35b61048a610efb565b6040516104979190612799565b60405180910390f35b6104ba60048036038101906104b59190612408565b610f25565b6040516104c79190612800565b60405180910390f35b6104ea60048036038101906104e59190612498565b61102e565b6040516104f79190612800565b60405180910390f35b610508611058565b604051610515919061281b565b60405180910390f35b61053860048036038101906105339190612498565b6110ea565b604051610546929190612a69565b60405180910390f35b61055761111e565b60405161056491906129ed565b60405180910390f35b61058760048036038101906105829190612408565b611124565b6040516105949190612800565b60405180910390f35b6105b760048036038101906105b29190612408565b61120f565b6040516105c49190612800565b60405180910390f35b6105e760048036038101906105e29190612354565b61122d565b6040516105f49190612800565b60405180910390f35b6106056112cf565b6040516106129190612799565b60405180910390f35b61063560048036038101906106309190612498565b6112f5565b60405161064594939291906127b4565b60405180910390f35b61066860048036038101906106639190612498565b6113dd565b60405161067a96959493929190612a08565b60405180910390f35b61068b611446565b6040516106989190612800565b60405180910390f35b6106bb60048036038101906106b691906124fd565b6114c0565b6040516106c891906129ed565b60405180910390f35b6106eb60048036038101906106e69190612444565b611571565b6040516106f992919061283d565b60405180910390f35b61071c6004803603810190610717919061237d565b611a36565b60405161072991906129ed565b60405180910390f35b61074c6004803603810190610747919061232b565b611abd565b005b610756611bb5565b6040516107639190612800565b60405180910390f35b60606004805461077b90612c29565b80601f01602080910402602001604051908101604052809291908181526020018280546107a790612c29565b80156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b5050505050905090565b600061081261080b611c2f565b8484611c37565b6001905092915050565b6028818154811061082c57600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030154908060040154905086565b6000601154905090565b60006108ac848484611e02565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006108f7611c2f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096e9061294d565b60405180910390fd5b61098b85610983611c2f565b858403611c37565b60019150509392505050565b60006012905090565b6000600660019054906101000a900460ff16156109e9576001600660016101000a81548160ff021916908315150217905550600660019054906101000a900460ff169050610a17565b6000600660016101000a81548160ff021916908315150217905550600660019054906101000a900460ff1690505b90565b6000610abc610a27611c2f565b848460026000610a35611c2f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ab79190612b2a565b611c37565b6001905092915050565b600080600090508080610ad890612c8c565b915050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b62906128cd565b60405180910390fd5b600083601660008681526020019081526020016000205414610c5057836016600086815260200190815260200160002081905550604051806040016040528085815260200182815250601b60008201518160000155602082015181600101559050508360186000868152602001908152602001600020600001819055508160186000868152602001908152602001600020600101819055506026601b9080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015481600001556001820154816001015550508392505050610c53565b50505b919050565b60186020528060005260406000206000915090508060000154908060010154905082565b60095481565b6000826015600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ce057600080fd5b6001905092915050565b6000600860009054906101000a900460ff1615610d21576001600860006101000a81548160ff021916908315150217905550610d3d565b6000600860006101000a81548160ff0219169083151502179055505b600860009054906101000a900460ff16905090565b6000601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610da3611c2f565b73ffffffffffffffffffffffffffffffffffffffff16610dc1610efb565b73ffffffffffffffffffffffffffffffffffffffff1614610e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0e9061296d565b60405180910390fd5b610e216000612086565b565b60196020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610e6c90612c29565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9890612c29565b8015610ee55780601f10610eba57610100808354040283529160200191610ee5565b820191906000526020600020905b815481529060010190602001808311610ec857829003601f168201915b5050505050908060020154908060030154905084565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081600f81905550600a821015610f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f699061292d565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16600f54604051610f9b90612784565b60006040518083038185875af1925050503d8060008114610fd8576040519150601f19603f3d011682016040523d82523d6000602084013e610fdd565b606091505b509150915081611022576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110199061290d565b60405180910390fd5b60019250505092915050565b60008160166000848152602001908152602001600020541461104f57600080fd5b60019050919050565b60606005805461106790612c29565b80601f016020809104026020016040519081016040528092919081815260200182805461109390612c29565b80156110e05780601f106110b5576101008083540402835291602001916110e0565b820191906000526020600020905b8154815290600101906020018083116110c357829003601f168201915b5050505050905090565b602681815481106110fa57600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60115481565b60008060026000611133611c2f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156111f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e7906129cd565b60405180910390fd5b6112046111fb611c2f565b85858403611c37565b600191505092915050565b600061122361121c611c2f565b8484611e02565b6001905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff16601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112c657600080fd5b60019050919050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6027818154811061130557600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461134e90612c29565b80601f016020809104026020016040519081016040528092919081815260200182805461137a90612c29565b80156113c75780601f1061139c576101008083540402835291602001916113c7565b820191906000526020600020905b8154815290600101906020018083116113aa57829003601f168201915b5050505050908060020154908060030154905084565b601a6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030154908060040154905086565b6000600660009054906101000a900460ff161561148f576001600660006101000a81548160ff021916908315150217905550600660009054906101000a900460ff1690506114bd565b6000600660006101000a81548160ff021916908315150217905550600660009054906101000a900460ff1690505b90565b600082600981905550600115156114d5610cea565b1515141561156a57600060146000600954815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611560600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261120f565b508091505061156b565b5b92915050565b60606000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fc906128cd565b60405180910390fd5b6001151561161584600f54610f25565b15151415611a2e57600061162884610d52565b90508373ffffffffffffffffffffffffffffffffffffffff16601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a2c5783601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018681526020016000815260200182815250601d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906117d7929190612154565b50604082015181600201556060820151816003015590505083601960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906118c6929190612154565b506000601960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555080601960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506027601d90806001815401808255809150506001900390600052602060002090600402016000909190919091506000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201816001019080546119fe90612c29565b611a099291906121da565b506002820154816002015560038201548160030155505084849250925050611a2f565b505b5b9250929050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611ac5611c2f565b73ffffffffffffffffffffffffffffffffffffffff16611ae3610efb565b73ffffffffffffffffffffffffffffffffffffffff1614611b39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b309061296d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba09061288d565b60405180910390fd5b611bb281612086565b50565b6000600660029054906101000a900460ff1615611bfe576001600660026101000a81548160ff021916908315150217905550600660029054906101000a900460ff169050611c2c565b6000600660026101000a81548160ff021916908315150217905550600660029054906101000a900460ff1690505b90565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9e906129ad565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0e906128ad565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611df591906129ed565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e699061298d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed99061286d565b60405180910390fd5b611eed83838361214a565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6b906128ed565b60405180910390fd5b818103600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120099190612b2a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161206d91906129ed565b60405180910390a361208084848461214f565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b82805461216090612c29565b90600052602060002090601f01602090048101928261218257600085556121c9565b82601f1061219b57805160ff19168380011785556121c9565b828001600101855582156121c9579182015b828111156121c85782518255916020019190600101906121ad565b5b5090506121d69190612267565b5090565b8280546121e690612c29565b90600052602060002090601f0160209004810192826122085760008555612256565b82601f106122195780548555612256565b8280016001018555821561225657600052602060002091601f016020900482015b8281111561225557825482559160010191906001019061223a565b5b5090506122639190612267565b5090565b5b80821115612280576000816000905550600101612268565b5090565b600061229761229284612ad2565b612aad565b9050828152602081018484840111156122af57600080fd5b6122ba848285612be7565b509392505050565b6000813590506122d181613092565b92915050565b6000813590506122e6816130a9565b92915050565b600082601f8301126122fd57600080fd5b813561230d848260208601612284565b91505092915050565b600081359050612325816130c0565b92915050565b60006020828403121561233d57600080fd5b600061234b848285016122c2565b91505092915050565b60006020828403121561236657600080fd5b6000612374848285016122d7565b91505092915050565b6000806040838503121561239057600080fd5b600061239e858286016122c2565b92505060206123af858286016122c2565b9150509250929050565b6000806000606084860312156123ce57600080fd5b60006123dc868287016122c2565b93505060206123ed868287016122c2565b92505060406123fe86828701612316565b9150509250925092565b6000806040838503121561241b57600080fd5b6000612429858286016122c2565b925050602061243a85828601612316565b9150509250929050565b6000806040838503121561245757600080fd5b600083013567ffffffffffffffff81111561247157600080fd5b61247d858286016122ec565b925050602061248e858286016122d7565b9150509250929050565b6000602082840312156124aa57600080fd5b60006124b884828501612316565b91505092915050565b600080604083850312156124d457600080fd5b60006124e285828601612316565b92505060206124f3858286016122c2565b9150509250929050565b6000806040838503121561251057600080fd5b600061251e85828601612316565b925050602061252f858286016122d7565b9150509250929050565b61254281612b92565b82525050565b61255181612b80565b82525050565b61256081612ba4565b82525050565b600061257182612b03565b61257b8185612b19565b935061258b818560208601612bf6565b61259481612d62565b840191505092915050565b60006125ac602383612b19565b91506125b782612d73565b604082019050919050565b60006125cf602683612b19565b91506125da82612dc2565b604082019050919050565b60006125f2602283612b19565b91506125fd82612e11565b604082019050919050565b6000612615601383612b19565b915061262082612e60565b602082019050919050565b6000612638602683612b19565b915061264382612e89565b604082019050919050565b600061265b601483612b19565b915061266682612ed8565b602082019050919050565b600061267e601a83612b19565b915061268982612f01565b602082019050919050565b60006126a1602883612b19565b91506126ac82612f2a565b604082019050919050565b60006126c4602083612b19565b91506126cf82612f79565b602082019050919050565b60006126e7602583612b19565b91506126f282612fa2565b604082019050919050565b600061270a600083612b0e565b915061271582612ff1565b600082019050919050565b600061272d602483612b19565b915061273882612ff4565b604082019050919050565b6000612750602583612b19565b915061275b82613043565b604082019050919050565b61276f81612bd0565b82525050565b61277e81612bda565b82525050565b600061278f826126fd565b9150819050919050565b60006020820190506127ae6000830184612548565b92915050565b60006080820190506127c96000830187612539565b81810360208301526127db8186612566565b90506127ea6040830185612766565b6127f76060830184612766565b95945050505050565b60006020820190506128156000830184612557565b92915050565b600060208201905081810360008301526128358184612566565b905092915050565b600060408201905081810360008301526128578185612566565b90506128666020830184612548565b9392505050565b600060208201905081810360008301526128868161259f565b9050919050565b600060208201905081810360008301526128a6816125c2565b9050919050565b600060208201905081810360008301526128c6816125e5565b9050919050565b600060208201905081810360008301526128e681612608565b9050919050565b600060208201905081810360008301526129068161262b565b9050919050565b600060208201905081810360008301526129268161264e565b9050919050565b6000602082019050818103600083015261294681612671565b9050919050565b6000602082019050818103600083015261296681612694565b9050919050565b60006020820190508181036000830152612986816126b7565b9050919050565b600060208201905081810360008301526129a6816126da565b9050919050565b600060208201905081810360008301526129c681612720565b9050919050565b600060208201905081810360008301526129e681612743565b9050919050565b6000602082019050612a026000830184612766565b92915050565b600060c082019050612a1d6000830189612766565b612a2a6020830188612539565b612a376040830187612557565b612a446060830186612766565b612a516080830185612766565b612a5e60a0830184612766565b979650505050505050565b6000604082019050612a7e6000830185612766565b612a8b6020830184612766565b9392505050565b6000602082019050612aa76000830184612775565b92915050565b6000612ab7612ac8565b9050612ac38282612c5b565b919050565b6000604051905090565b600067ffffffffffffffff821115612aed57612aec612d33565b5b612af682612d62565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612b3582612bd0565b9150612b4083612bd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b7557612b74612cd5565b5b828201905092915050565b6000612b8b82612bb0565b9050919050565b6000612b9d82612bb0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612c14578082015181840152602081019050612bf9565b83811115612c23576000848401525b50505050565b60006002820490506001821680612c4157607f821691505b60208210811415612c5557612c54612d04565b5b50919050565b612c6482612d62565b810181811067ffffffffffffffff82111715612c8357612c82612d33565b5b80604052505050565b6000612c9782612bd0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612cca57612cc9612cd5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f74206f776e657200000000000000000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b7f416d6f756e74206e6f7420656e6f75676820746f20706c617921000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b50565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61309b81612b80565b81146130a657600080fd5b50565b6130b281612b92565b81146130bd57600080fd5b50565b6130c981612bd0565b81146130d457600080fd5b5056fea2646970667358221220ac29955f8ae29bb9fcedc52ca7f1ba8db9652229316c77e19553d3012edb32b364736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "npn Contract initialization. The `constructor` is executed only once when the contract is created."
      },
      "payfee(address,uint256)": {
        "notice": "A function to transfer tokens. The `external` modifier makes a function *only* callable from outside the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 119,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 125,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 127,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 129,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "rockchosen",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 799,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "scissorschosen",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 802,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "paperchosen",
        "offset": 2,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 804,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "choicemade",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 807,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "setprevwinnings",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "prev_gamestaked",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 812,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_tokenname",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 815,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_tokensymbol",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 817,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 820,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "randNonce",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 823,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "modulus",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 826,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_payfee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 829,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "maxWaitTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 859,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "totalsupplytokens",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 863,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "balances",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 869,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playeringamecheck",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 875,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "prev_winning",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 881,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gamewithplayer",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 885,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gamesplayed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 889,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playersplayed",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 894,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_games",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(Game)834_storage)"
      },
      {
        "astId": 899,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_playerstore",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_struct(Players)843_storage)"
      },
      {
        "astId": 904,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_playinggames",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_struct(PlayingGame)856_storage)"
      },
      {
        "astId": 907,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "newgame",
        "offset": 0,
        "slot": "27",
        "type": "t_struct(Game)834_storage"
      },
      {
        "astId": 910,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "newplayerregistered",
        "offset": 0,
        "slot": "29",
        "type": "t_struct(Players)843_storage"
      },
      {
        "astId": 913,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playerinthegame",
        "offset": 0,
        "slot": "33",
        "type": "t_struct(PlayingGame)856_storage"
      },
      {
        "astId": 917,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gamesregistered",
        "offset": 0,
        "slot": "38",
        "type": "t_array(t_struct(Game)834_storage)dyn_storage"
      },
      {
        "astId": 921,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playersregistered",
        "offset": 0,
        "slot": "39",
        "type": "t_array(t_struct(Players)843_storage)dyn_storage"
      },
      {
        "astId": 925,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gameinplay",
        "offset": 0,
        "slot": "40",
        "type": "t_array(t_struct(PlayingGame)856_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)834_storage)dyn_storage": {
        "base": "t_struct(Game)834_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Players)843_storage)dyn_storage": {
        "base": "t_struct(Players)843_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.Players[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PlayingGame)856_storage)dyn_storage": {
        "base": "t_struct(PlayingGame)856_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.PlayingGame[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(Players)843_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RockPaperScissors.Players)",
        "numberOfBytes": "32",
        "value": "t_struct(Players)843_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Game)834_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RockPaperScissors.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)834_storage"
      },
      "t_mapping(t_uint256,t_struct(PlayingGame)856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RockPaperScissors.PlayingGame)",
        "numberOfBytes": "32",
        "value": "t_struct(PlayingGame)856_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Game)834_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Game",
        "members": [
          {
            "astId": 831,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gameid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 833,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gamecount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Players)843_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Players",
        "members": [
          {
            "astId": 836,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playeraddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 838,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playername",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 840,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerscore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 842,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerbalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PlayingGame)856_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.PlayingGame",
        "members": [
          {
            "astId": 845,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playinggameid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 847,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerininaddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 849,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gameover",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 851,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gamescore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 853,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerscount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 855,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}